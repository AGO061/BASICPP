HOW TO USE:
In your terminal run
C64Compiler.exe/.py file.bas <flags>



CUSTOM INSTRUCTIONS:

///;<integer> -> defines the number of lines to skip (lines are always in steps of 10)
EXAMPLE:
SOURCE

print "a"

///;10

print "b"

COMPILED

10 print "a"
110 print "b"

--------------------

rem <string> -> all comments are removed if they are not inline

EXAMPLE:
SOURCE

print "a"

rem print b

print "b"

COMPILED

10 print "a"
20 print "b"

--------------------

///,<name>=<value> -> constant definition

EXAMPLE:
SOURCE
///,hw="hello world"
///,p1="This is
///,p2= a test"

rem use ///<name>/// to replace the text with the value
print ///hw///
print ///p1//////p2///

COMPILED

10 print "hello world"
20 print "This is a test"

---------------------

///.<string> -> GOTO POINTER

this is a movable goto pointer, that allows the user to goto the point where the instruction under the string is located

EXAMPLE:
SOURCE

///.a
print "a"

goto a

print "b"

COMPILED

10 print "a"
20 goto 10
30 print "b"

---------------------
///{<name>
<code>
}/// -> Function

This feature allows users to make custom functions to speed up repetitive tasks

EXAMPLE:
SOURCE

///,constant="constant content"

///{helloworld
print "hello world"
}///

///{constinfunc
print ///constant///
}///


rem to use a function, just use it the same way you would use a constant
///helloworld///
///constinfunc///

COMPILED

10 print "hello world"
20 print "constant content"


---------------------
///FLAGS:<flag> <flag> ... -> Flags definition in the file

This is a special command, it only works if it is in the FIRST line of a file.bas
It allows you to define flags for that program ignoring the command line ones
(This command is not mandatory, in case this line is not found, the compiler will use the console args)
Putting this command anywhere else in the file, will result in it getting removed.

EXAMPLE:
SOURCE
///FLAGS:-r -kc

///,teststring="This is just a test for flags"
rem this comment should stay
print ///teststring///
rem and here there should be a run

COMPILED

10 rem this comment should stay
20 print "This is just a test for flags"
30 rem and here there should be a run
run

---------------------

FLAGS:

for optimization purposes, by default, the ///. will not be replaced by a rem, BUT this makes stuff like this:
///.a
///;10
print "a"
goto a

give an error because line 10 does not exist.

you can, of course, change this!
just run the compiler with the -ur flag!
C64Compiler.exe/.py file.bas <-ur or --userem>

if you wish to automatically put in a newline instead of the :, then use the flag -rmc
C64Compiler.exe/.py file.bas <-rmc or --removecolon>
(not recommended)

if you wish to keep comments in your code, use the flag -kc
C64Compiler.exe/.py file.bas <-kc or --keepcomments>

if you wish to add the run at the end of your code, use the flag -r
C64Compiler.exe/.py file.bas <-r or --run>

if you dont want the compiler to halt at the end, use the flag -ne
C64Compiler.exe/.py file.bas <-ne or --noerrors>

SPECIAL USES:
the constant, is actually just a piece of text that gets replaced and you can use some tricks
///,win=print "you win"
///,lose=print "you lose"
///,checkwin=if w%=0 then
///,checklose=if w%=1 then
///,randbit=int(rnd(1)*2)

rem these look a bit like functions
w%=///randbit///
///checkwin/// ///win///
///checklose/// ///lose///

COMPILER RESULT:
10 w%=int(rnd(1)*2)
20 if w%=0 then print "you win"
30 if w%=1 then print "you lose"
